# -*- coding: utf-8 -*-
"""DFSBFS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QO1F2iUmkfPtIqL6RoySrHaFBIDi44pN

# 15. 특정 거리의 도시 찾기
"""

N, M, K, X = map(int, input().split())

graph = [[] for _ in range(N+1)]

for i in range(M):
  a,b = map(int, input().split())
  graph[a].append(b)

distance = [-1]*(N+1)
distance[X] = 0

from collections import deque

queue = deque([X])
while queue:
  v = queue.popleft()
  for next in graph[v]:
    if distance[next]==-1:
      distance[next] = distance[v] + 1
      queue.append(next)

check = False
for i in range(1, N+1):
  if distance[i] == K:
    print(i)
    check = True
if check == False:
  print(-1)

"""# 16. 연구소"""

N, M = map(int, input().split())

whole_map = [[] for _ in range(N)]
for i in range(len(whole_map)):
  whole_map[i] = list(map(int, input().split()))

candidate = [[0]*M for _ in range(N)]

dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]
result = 0
# 바이러스 퍼뜨리는 함수
def spread_virus(x,y):
  for i in range(4):
    new_x = x+dx[i]
    new_y = x+dy[i]
    if (new_x >= 0 and new_x < N and new_y >= 0 and new_y < M):
      if candidate[new_x][new_y] == 0:
        candidate[new_x][new_y] = 2
        spread_virus(new_x, new_y)

# 안전구역 계산
def safety_area(candidate):
  count = 0
  for i in range(N):
    for j in range(M):
      if whole_map[i][j] == 0:
        count += 1
  return count

def build_wall(num_wall):
  global result
  if num_wall == 3:
    for i in range(N):
      for j in range(M):
        candidate[i][j] = whole_map[i][j]
    for i in range(N):
      for j in range(M):
        if candidate[i][j] == 2:
          spread_virus(i,j)
    result = max(result, safety_area(candidate)) 
    return

  for i in range(N):
    for j in range(M):
      if whole_map[i][j] == 0:
        whole_map[i][j] = 1
        num_wall += 1
        build_wall(num_wall)
        whole_map[i][j] = 0
        num_wall -= 1

build_wall(0)

print(result)

"""# 17. 경쟁적 전염"""

N, K = map(int, input().split())

flask = [[] for _ in range(N)]
for i in range(len(flask)):
  flask[i] = list(map(int, input().split()))

S, X, Y = map(int, input().split())

spread_flask = flask.copy()

dx = [-1,0,1,0]
dy = [0,-1,0,1]

def spread(temp,x,y, num):
  num = temp[x][y]
  for n in range(4):
    nx = x + dx[n]
    ny = y + dy[n]
    if nx >= 0 and nx<N and ny>=0 and ny < K:
      if temp[nx][ny] == 0:
        temp[nx][ny] = num

temp = flask.copy()

virus = []
for i in range(N):
  for j in range(K):
    if flask[i][j] != 0:
      virus.append(flask[i][j])

virus.sort()

temp = [[0]*N for _ in range(K)]
for i in range(N):
  for j in range(K):
    temp[i][j] = flask[i][j]

def copy_map(map1, map2, N, K):
  for i in range(N):
    for j in range(K):
      map1[i][j] = map2[i][j]

Stop_or_GO = True
count = 0
for i in range(S):
  copy_map(flask, temp, N, K)
  for iter in range(len(virus)):
    for i in range(N):
      for j in range(K):
        if flask[i][j] == virus[iter]:
          spread(temp, i,j,virus[iter])

temp[X-1][Y-1]

"""# 18. 괄호 변환"""

candidate = input()

candiate

